// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Chassis.h"
#include "../Robotmap.h"
#include "../Commands/DriveWithJoysticks.h"
#include <math.h>
Chassis::Chassis() : Subsystem("Chassis") {
	m_gyro = new Gyro(MODULE1NUM, CHASSISGYROANALOG);
	m_gyro->SetSensitivity(1.25);
	m_leftMotor = new Talon(MODULE1NUM, CHASSISLEFTMOTORPWM);
	m_rightMotor =  new Talon(MODULE1NUM, CHASSISRIGHTMOTORPWM);
	m_shiftUpSolenoid = new Solenoid(MODULE1NUM, UPSOLENOID);
	m_shiftDownSolenoid = new Solenoid(MODULE1NUM, DOWNSOLENOID);
	isUp = true; //we are assuming defualt is up. Later make sure 
#ifdef	TESTERBOT
	chassisDrive->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
	chassisDrive->SetInvertedMotor(RobotDrive::kRearRightMotor, true);       
#endif
	drive = new RobotDrive(m_leftMotor, m_rightMotor);
	drive->SetSafetyEnabled(false);
	        drive->SetExpiration(0.1);
	        drive->SetSensitivity(0.5);
	        drive->SetMaxOutput(1.0);
	        
	m_accelrometer = new ADXL345_2489(MODULE1NUM,  0xA6);
}
    
void Chassis::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	SetDefaultCommand(new DriveWithJoysticks());
}
void Chassis::driveWithJoysticks(float rightstick, float leftstick) {
#ifdef TESTERBOT
	drive->TankDrive( leftstick, rightstick);
#else
	if(fabs(rightstick) < 0.05){
		rightstick = 0;
	}
	if(fabs(leftstick) < 0.05){
		leftstick = 0;
	}
	if(rightstick != 0 || leftstick != 0){
		cout << "Right " << rightstick << " Left " << leftstick << endl;
	}
	drive->TankDrive( rightstick, leftstick);
#endif
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Chassis::goStraight(){
	drive->TankDrive(1.0*CommandBase::oi->getCrouch(), 1.0*CommandBase::oi->getCrouch());
}
void Chassis::goBack(){
	drive->TankDrive(-1.0*CommandBase::oi->getCrouch(), -1.0*CommandBase::oi->getCrouch());
}
void Chassis::stop(){
	drive->TankDrive(0*CommandBase::oi->getCrouch(), 0*CommandBase::oi->getCrouch());
}
void Chassis::turnLeft(){
	drive->TankDrive(-1.0*CommandBase::oi->getCrouch(), 1.0*CommandBase::oi->getCrouch());
}
void Chassis::turnRight(){
	drive->TankDrive(1.0*CommandBase::oi->getCrouch(), -1.0*CommandBase::oi->getCrouch());
}
void Chassis::getAccel(){
	double tempx = m_accelrometer->GetAcceleration(ADXL345_2489::kAxis_X);
	double tempy = m_accelrometer->GetAcceleration(ADXL345_2489::kAxis_Y);
	double tempz = m_accelrometer->GetAcceleration(ADXL345_2489::kAxis_Z);
	
	cout << " x1: " << tempx << " ";
	cout << " y2: " << tempy << " ";
	cout << " z1: " << tempz << " ";
}

void Chassis::__shiftUp(){
	m_shiftUpSolenoid->Set(true);
	m_shiftDownSolenoid->Set(false);
	isUp = true;
//	cout << "going up" << endl;
}

void Chassis::__shiftDown(){
	m_shiftUpSolenoid->Set(false);
	m_shiftDownSolenoid->Set(true);
	isUp = false;
//	cout << "going down" << endl;
}


void Chassis::shiftUp(){
	if(isUp == false){
		__shiftUp();
	}
}

void Chassis::shiftDown(){
	if(isUp){
		__shiftDown();
	}
}

void Chassis::switchGear(){
	if(isUp){
		__shiftDown();
	}
	else{
		__shiftUp();
		
	}
}
