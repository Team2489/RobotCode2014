// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"


void Robot::RobotInit() {
	CommandBase::init();
	// instantiate the command used for the autonomous periodS
	autonomousCommand = new AutonomousCommand();
	teleopCommand = new DriveWithJoysticks();
	
#if 0
	OI::AutonomousVariant variant = oi->getAutonomousVariant();
	switch (variant) {
	case OI::AV_2:
		autonomousCommand = new Autonomous1();
		break;
	case OI::AV_4:
	//	autonomousCommand = new Autonomous4();
		autonomousCommand = new Autonomous1();
		break;
	case OI::AV_6:
	//	autonomousCommand = new Autonomous2();
		autonomousCommand = new Autonomous1();
		break;
	case OI::AV_8:
		//autonomousCommand = new DriveInSquare();
		autonomousCommand = new Autonomous1();
		break;
	default:
		break;
	}
#else
	autonomousCommand = new AutonomousCommand();
#endif /* 0 */
  }
void Robot::AutonomousInit() {	
	if (autonomousCommand != NULL)
	autonomousCommand->Start();
}
	
void Robot::AutonomousPeriodic() {
	CommandBase::oi->printVariant();
	CommandBase::oi->UpdateScreen();
	if (autonomousCommand != NULL){
		Scheduler::GetInstance()->Run();
	}
}
	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
	teleopCommand->Start();
}
	
void Robot::TeleopPeriodic() {
	//cout << "TeleopPeriodic run" << endl;
	if (teleopCommand != NULL){
		Scheduler::GetInstance()->Run();
		//oi->printCrouch();
		CommandBase::oi->printTargeting();
		CommandBase::oi->printAngle();
		CommandBase::oi->printCatapultSpeed();
		CommandBase::oi->UpdateScreen(); //Don't put print out below this line
		// oi->printVariant();
	//	cout << "sensor = " << Robot::shooter->pistonSensor->Get() << endl;
	//	chassis->getAccel();
	//	shooter->getAccel();
	//	cout << "Shooter Angle: " << shooter->getAngle() << endl; 
	}
}

START_ROBOT_CLASS(Robot);
